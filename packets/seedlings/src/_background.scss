
@import "./axioms/Colors";

/*
---
Name: Background
Base:
    bg: background
Modifiers:
    -none: none
    -transparent: transparent
    --dark-translucent: dark transparent
    --light-translucent: light transparent
    --teal-200-o-30p: Teal 200 (30% opacity)
    --teal-300-o-30p: Teal 300 (30% opacity)
    --teal-700-o-30p: Teal 700 (30% opacity)
    --neutral-0-o-10p: Neutral 0 (10% opacity)
    --neutral-0-o-30p: Neutral 0 (30% opacity)
    --neutral-0-o-80p: Neutral 0 (80% opacity)
    --color-name: name of a color variable
Breakpoints:
    -ns: not-small
    -m: medium
    -l: large
HoverClasses: true
---
*/

@each $breakpoint-name, $breakpoint in $breakpoints {
  @if ($breakpoint != "") {
    @media #{$breakpoint} {
      @include generate-utility-color($colors-networks, "background-color", "bg-", "", $breakpoint-name);
      @include generate-utility-color-hover($colors-networks, "background-color", "bg-", "hover-", $breakpoint-name);
      @include generate-utility-color($colors-without-gray, "background-color", "bg-", "", $breakpoint-name);
      @include generate-utility-color-hover($colors-without-gray, "background-color", "bg-", "hover-", $breakpoint-name);
      @include generate-utility-color($theme-colors, "background-color", "bg-", "", $breakpoint-name);
      @include generate-utility-color-hover($theme-colors, "background-color", "bg-", "hover-", $breakpoint-name);
      .bg-none#{$breakpoint-name} {
        background: none;
      }
      .bg-transparent#{$breakpoint-name} {
        background-color: transparent;
      }
      .bg--dark-translucent#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 1000), .6);
      }
      .bg--light-translucent#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .6);
      }
      .bg--teal-200-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 200), .3);
      }
      .bg--teal-300-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 300), .3);
      }
      .bg--teal-700-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 700), .3);
      }
      .bg--neutral-0-o-10p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .1);
      }
      .bg--neutral-0-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .3);
      }
      .bg--neutral-0-o-80p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .8);
      }
    }
  } @else {
    @include generate-utility-color($colors-networks, "background-color", "bg-", "");
    @include generate-utility-color-hover($colors-networks, "background-color", "bg-");
    @include generate-utility-color($colors-without-gray, "background-color", "bg-", "");
    @include generate-utility-color-hover($colors-without-gray, "background-color", "bg-");
    @include generate-utility-color($theme-colors, "background-color", "bg-", "");
    @include generate-utility-color-hover($theme-colors, "background-color", "bg-");
    .bg-none {
      background: none;
    }
    .bg-transparent {
      background-color: transparent;
    }
    .bg--dark-translucent {
      background-color: rgba(get-color(neutral, 1000), .6);
    }
    .bg--light-translucent {
      background-color: rgba(get-color(neutral, 0), .6);
    }
    .bg--teal-700-o-30p {
      background-color: rgba(get-color(teal, 700), .3);
    }
    .bg--neutral-0-o-10p {
      background-color: rgba(get-color(neutral, 0), .1);
    }
    .bg--neutral-0-o-30p {
      background-color: rgba(get-color(neutral, 0), .3);
    }
    .bg--neutral-0-o-80p {
      background-color: rgba(get-color(neutral, 0), .8);
    }
  }
}
