@import "./axioms/Colors";

/*
---
Name: Color
Base:
    c: color
Modifiers:
    -inherit: Inherit
    --color-name: name of a color variable
    --teal-100-o-80p: Teal 100 (80% opacity)
    --teal-600-o-40p: Teal 600 (40% opacity)
    --teal-700-o-30p: Teal 700 (30% opacity)
    --teal-1000-o-40p: Teal 1000 (40% opacity)
    --neutral-0-o-10p: Neutral 0 (10% opacity)
    --neutral-0-o-30p: Neutral 0 (30% opacity)
    --neutral-0-o-40p: Neutral 0 (40% opacity)
    --neutral-0-o-80p: Neutral 0 (80% opacity)
Breakpoints:
    -ns: not-small
    -m: medium
    -l: large
HoverClasses: true
Example: <div class="f500 {{modifier}}"><p>The quick brown fox jumped over the lazy dog</p></div><p>{{label}}</p>
---
*/
@each $breakpoint-name, $breakpoint in $breakpoints {
  @if ($breakpoint != "") {
    @media #{$breakpoint} {
      @include generate-utility-color($colors-networks, "color", "c-", "", $breakpoint-name);
      @include generate-utility-color-hover($colors-networks, "color", "c-", "hover-", $breakpoint-name);
      @include generate-utility-color($colors-without-gray, "color", "c-", "", $breakpoint-name);
      @include generate-utility-color-hover($colors-without-gray, "color", "c-", "hover-", $breakpoint-name);
      @include generate-utility-color($theme-colors, "color", "c-", "", $breakpoint-name);
      @include generate-utility-color-hover($theme-colors, "color", "c-", "hover-", $breakpoint-name);
      .c-inherit#{$breakpoint-name},
      .hover-c-inherit#{$breakpoint-name}:hover {
        color: inherit;
      }
      .c--teal-100-o-80p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 100), .8);
      }
      .c--teal-600-o-40p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 600), .4);
      }
      .c--teal-700-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 700), .3);
      }
      .c--teal-1000-o-40p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 1000), .4);
      }
      .c--teal-1000-o-40p#{$breakpoint-name} {
        background-color: rgba(get-color(teal, 1000), .4);
      }
      .c--neutral-0-o-10p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .1);
      }
      .c--neutral-0-o-30p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .3);
      }
      .c--neutral-0-o-40p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .4);
      }
      .c--neutral-0-o-80p#{$breakpoint-name} {
        background-color: rgba(get-color(neutral, 0), .8);
      }
    }
  } @else {
    @include generate-utility-color($colors-networks, "color", "c-", "");
    @include generate-utility-color-hover($colors-networks, "color", "c-");
    @include generate-utility-color($colors-without-gray, "color", "c-", "");
    @include generate-utility-color-hover($colors-without-gray, "color", "c-");
    @include generate-utility-color($theme-colors, "color", "c-", "");
    @include generate-utility-color-hover($theme-colors, "color", "c-");
    .c-inherit,
    .hover-c-inherit:hover {
      color: inherit;
    }
  }
}

